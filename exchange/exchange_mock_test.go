// Code generated by MockGen. DO NOT EDIT.
// Source: exchange.go
//
// Generated by this command:
//
//	mockgen -source exchange.go -destination exchange_mock_test.go -package exchange_test
//

// Package exchange_test is a generated GoMock package.
package exchange_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	exchange "github.com/justenwalker/mack/exchange"
	thirdparty "github.com/justenwalker/mack/macaroon/thirdparty"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// EncodeMessage mocks base method.
func (m *MockEncoder) EncodeMessage(em *exchange.EncryptedMessage) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeMessage", em)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeMessage indicates an expected call of EncodeMessage.
func (mr *MockEncoderMockRecorder) EncodeMessage(em any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeMessage", reflect.TypeOf((*MockEncoder)(nil).EncodeMessage), em)
}

// EncodeTicket mocks base method.
func (m *MockEncoder) EncodeTicket(t thirdparty.Ticket) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeTicket", t)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeTicket indicates an expected call of EncodeTicket.
func (mr *MockEncoderMockRecorder) EncodeTicket(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeTicket", reflect.TypeOf((*MockEncoder)(nil).EncodeTicket), t)
}

// MockEncryptor is a mock of Encryptor interface.
type MockEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptorMockRecorder
}

// MockEncryptorMockRecorder is the mock recorder for MockEncryptor.
type MockEncryptorMockRecorder struct {
	mock *MockEncryptor
}

// NewMockEncryptor creates a new mock instance.
func NewMockEncryptor(ctrl *gomock.Controller) *MockEncryptor {
	mock := &MockEncryptor{ctrl: ctrl}
	mock.recorder = &MockEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptor) EXPECT() *MockEncryptorMockRecorder {
	return m.recorder
}

// EncryptMessage mocks base method.
func (m *MockEncryptor) EncryptMessage(msg []byte) (*exchange.EncryptedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptMessage", msg)
	ret0, _ := ret[0].(*exchange.EncryptedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptMessage indicates an expected call of EncryptMessage.
func (mr *MockEncryptorMockRecorder) EncryptMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptMessage", reflect.TypeOf((*MockEncryptor)(nil).EncryptMessage), msg)
}

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// DecodeMessage mocks base method.
func (m *MockDecoder) DecodeMessage(msg []byte) (*exchange.EncryptedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeMessage", msg)
	ret0, _ := ret[0].(*exchange.EncryptedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeMessage indicates an expected call of DecodeMessage.
func (mr *MockDecoderMockRecorder) DecodeMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeMessage", reflect.TypeOf((*MockDecoder)(nil).DecodeMessage), msg)
}

// DecodeTicket mocks base method.
func (m *MockDecoder) DecodeTicket(bs []byte) (*thirdparty.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeTicket", bs)
	ret0, _ := ret[0].(*thirdparty.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeTicket indicates an expected call of DecodeTicket.
func (mr *MockDecoderMockRecorder) DecodeTicket(bs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeTicket", reflect.TypeOf((*MockDecoder)(nil).DecodeTicket), bs)
}

// MockDecryptor is a mock of Decryptor interface.
type MockDecryptor struct {
	ctrl     *gomock.Controller
	recorder *MockDecryptorMockRecorder
}

// MockDecryptorMockRecorder is the mock recorder for MockDecryptor.
type MockDecryptorMockRecorder struct {
	mock *MockDecryptor
}

// NewMockDecryptor creates a new mock instance.
func NewMockDecryptor(ctrl *gomock.Controller) *MockDecryptor {
	mock := &MockDecryptor{ctrl: ctrl}
	mock.recorder = &MockDecryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecryptor) EXPECT() *MockDecryptorMockRecorder {
	return m.recorder
}

// DecryptMessage mocks base method.
func (m *MockDecryptor) DecryptMessage(em *exchange.EncryptedMessage) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptMessage", em)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptMessage indicates an expected call of DecryptMessage.
func (mr *MockDecryptorMockRecorder) DecryptMessage(em any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptMessage", reflect.TypeOf((*MockDecryptor)(nil).DecryptMessage), em)
}

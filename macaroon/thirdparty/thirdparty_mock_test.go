// Code generated by MockGen. DO NOT EDIT.
// Source: thirdparty.go
//
// Generated by this command:
//
//	mockgen -source thirdparty.go -destination thirdparty_mock_test.go -package thirdparty_test
//

// Package thirdparty_test is a generated GoMock package.
package thirdparty_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	macaroon "github.com/justenwalker/mack/macaroon"
	thirdparty "github.com/justenwalker/mack/macaroon/thirdparty"
)

// MockThirdParty is a mock of ThirdParty interface.
type MockThirdParty struct {
	ctrl     *gomock.Controller
	recorder *MockThirdPartyMockRecorder
}

// MockThirdPartyMockRecorder is the mock recorder for MockThirdParty.
type MockThirdPartyMockRecorder struct {
	mock *MockThirdParty
}

// NewMockThirdParty creates a new mock instance.
func NewMockThirdParty(ctrl *gomock.Controller) *MockThirdParty {
	mock := &MockThirdParty{ctrl: ctrl}
	mock.recorder = &MockThirdPartyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThirdParty) EXPECT() *MockThirdPartyMockRecorder {
	return m.recorder
}

// DischargeCaveat mocks base method.
func (m *MockThirdParty) DischargeCaveat(ctx context.Context, c *macaroon.Caveat) (macaroon.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DischargeCaveat", ctx, c)
	ret0, _ := ret[0].(macaroon.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DischargeCaveat indicates an expected call of DischargeCaveat.
func (mr *MockThirdPartyMockRecorder) DischargeCaveat(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DischargeCaveat", reflect.TypeOf((*MockThirdParty)(nil).DischargeCaveat), ctx, c)
}

// MatchCaveat mocks base method.
func (m *MockThirdParty) MatchCaveat(c *macaroon.Caveat) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCaveat", c)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchCaveat indicates an expected call of MatchCaveat.
func (mr *MockThirdPartyMockRecorder) MatchCaveat(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCaveat", reflect.TypeOf((*MockThirdParty)(nil).MatchCaveat), c)
}

// MockTicketExtractor is a mock of TicketExtractor interface.
type MockTicketExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockTicketExtractorMockRecorder
}

// MockTicketExtractorMockRecorder is the mock recorder for MockTicketExtractor.
type MockTicketExtractorMockRecorder struct {
	mock *MockTicketExtractor
}

// NewMockTicketExtractor creates a new mock instance.
func NewMockTicketExtractor(ctrl *gomock.Controller) *MockTicketExtractor {
	mock := &MockTicketExtractor{ctrl: ctrl}
	mock.recorder = &MockTicketExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketExtractor) EXPECT() *MockTicketExtractorMockRecorder {
	return m.recorder
}

// ExtractTicket mocks base method.
func (m *MockTicketExtractor) ExtractTicket(ctx context.Context, cID []byte) (*thirdparty.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTicket", ctx, cID)
	ret0, _ := ret[0].(*thirdparty.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTicket indicates an expected call of ExtractTicket.
func (mr *MockTicketExtractorMockRecorder) ExtractTicket(ctx, cID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTicket", reflect.TypeOf((*MockTicketExtractor)(nil).ExtractTicket), ctx, cID)
}

// MockPredicateChecker is a mock of PredicateChecker interface.
type MockPredicateChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateCheckerMockRecorder
}

// MockPredicateCheckerMockRecorder is the mock recorder for MockPredicateChecker.
type MockPredicateCheckerMockRecorder struct {
	mock *MockPredicateChecker
}

// NewMockPredicateChecker creates a new mock instance.
func NewMockPredicateChecker(ctrl *gomock.Controller) *MockPredicateChecker {
	mock := &MockPredicateChecker{ctrl: ctrl}
	mock.recorder = &MockPredicateCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredicateChecker) EXPECT() *MockPredicateCheckerMockRecorder {
	return m.recorder
}

// CheckPredicate mocks base method.
func (m *MockPredicateChecker) CheckPredicate(ctx context.Context, predicate []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPredicate", ctx, predicate)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPredicate indicates an expected call of CheckPredicate.
func (mr *MockPredicateCheckerMockRecorder) CheckPredicate(ctx, predicate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPredicate", reflect.TypeOf((*MockPredicateChecker)(nil).CheckPredicate), ctx, predicate)
}

// MockCaveatIDIssuer is a mock of CaveatIDIssuer interface.
type MockCaveatIDIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockCaveatIDIssuerMockRecorder
}

// MockCaveatIDIssuerMockRecorder is the mock recorder for MockCaveatIDIssuer.
type MockCaveatIDIssuerMockRecorder struct {
	mock *MockCaveatIDIssuer
}

// NewMockCaveatIDIssuer creates a new mock instance.
func NewMockCaveatIDIssuer(ctrl *gomock.Controller) *MockCaveatIDIssuer {
	mock := &MockCaveatIDIssuer{ctrl: ctrl}
	mock.recorder = &MockCaveatIDIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaveatIDIssuer) EXPECT() *MockCaveatIDIssuerMockRecorder {
	return m.recorder
}

// IssueCaveatID mocks base method.
func (m *MockCaveatIDIssuer) IssueCaveatID(ctx context.Context, ticket thirdparty.Ticket) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCaveatID", ctx, ticket)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCaveatID indicates an expected call of IssueCaveatID.
func (mr *MockCaveatIDIssuerMockRecorder) IssueCaveatID(ctx, ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCaveatID", reflect.TypeOf((*MockCaveatIDIssuer)(nil).IssueCaveatID), ctx, ticket)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ../../macaroon/verify.go
//
// Generated by this command:
//
//	mockgen -source ../../macaroon/verify.go -destination mocks.go -typed -package testhelpers
//

// Package testhelpers is a generated GoMock package.
package testhelpers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPredicateChecker is a mock of PredicateChecker interface.
type MockPredicateChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateCheckerMockRecorder
}

// MockPredicateCheckerMockRecorder is the mock recorder for MockPredicateChecker.
type MockPredicateCheckerMockRecorder struct {
	mock *MockPredicateChecker
}

// NewMockPredicateChecker creates a new mock instance.
func NewMockPredicateChecker(ctrl *gomock.Controller) *MockPredicateChecker {
	mock := &MockPredicateChecker{ctrl: ctrl}
	mock.recorder = &MockPredicateCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredicateChecker) EXPECT() *MockPredicateCheckerMockRecorder {
	return m.recorder
}

// CheckPredicate mocks base method.
func (m *MockPredicateChecker) CheckPredicate(ctx context.Context, predicate []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPredicate", ctx, predicate)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPredicate indicates an expected call of CheckPredicate.
func (mr *MockPredicateCheckerMockRecorder) CheckPredicate(ctx, predicate any) *MockPredicateCheckerCheckPredicateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPredicate", reflect.TypeOf((*MockPredicateChecker)(nil).CheckPredicate), ctx, predicate)
	return &MockPredicateCheckerCheckPredicateCall{Call: call}
}

// MockPredicateCheckerCheckPredicateCall wrap *gomock.Call
type MockPredicateCheckerCheckPredicateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPredicateCheckerCheckPredicateCall) Return(arg0 bool, arg1 error) *MockPredicateCheckerCheckPredicateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPredicateCheckerCheckPredicateCall) Do(f func(context.Context, []byte) (bool, error)) *MockPredicateCheckerCheckPredicateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPredicateCheckerCheckPredicateCall) DoAndReturn(f func(context.Context, []byte) (bool, error)) *MockPredicateCheckerCheckPredicateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
